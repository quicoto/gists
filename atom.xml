<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Ricard's code gists</title><link>https://ricard.dev/gists/</link><description>Recent content in Home on Ricard's code gists</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ricard.dev/gists/atom.xml" rel="self" type="application/rss+xml"/><item><title>Convert all JPG images to AVIF</title><link>https://ricard.dev/gists/2024-02-28/</link><pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2024-02-28/</guid><description>It loops through all the jpg images in the folder and converts them to AVIF with the given configuration of quality and size.
It requires libavif to be installed on the machine. If you&amp;rsquo;re on MacOS grab it on Homebrew.
`for file in *.jpg; do avifenc -q 50 --speed 3 --ignore-exif &amp;#34;$file&amp;#34; -o &amp;#34;${file%.*}.avif&amp;#34;; done`</description></item><item><title>Add View Transitions API to page</title><link>https://ricard.dev/gists/2023-05-19/</link><pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2023-05-19/</guid><description>Full site page transition
&amp;lt;meta name=&amp;#34;view-transition&amp;#34; content=&amp;#34;same-origin&amp;#34; /&amp;gt;</description></item><item><title>List and sort directories by size</title><link>https://ricard.dev/gists/2023-04-17/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2023-04-17/</guid><description>It lists and sorts by size the directories in the current path. Change the dot to an absolute path if needed
du -ah --max-depth=1 . | sort -hr</description></item><item><title>Remove all files by extension from folder recursively</title><link>https://ricard.dev/gists/2023-02-06/</link><pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2023-02-06/</guid><description>Finds all the files with the &amp;ldquo;xml&amp;rdquo; extension and deletes them
find . -name &amp;#34;*.xml&amp;#34; -exec rm {} \;</description></item><item><title>Mastodon: Toot instead of Publish</title><link>https://ricard.dev/gists/2022-12-18/</link><pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2022-12-18/</guid><description>Overwrites Mastodon&amp;rsquo;s V4 &amp;ldquo;Publish!&amp;rdquo; button to &amp;ldquo;Toot!&amp;rdquo; using CSS.
You can add your custom CSS via: Administration &amp;gt; Server Settings &amp;gt; Appearance tab.
div.compose-form__publish-button-wrapper &amp;gt; button, div.ui__header__links &amp;gt; a[href=&amp;#34;/publish&amp;#34;] { text-indent: -9999px; line-height: 0; } div.compose-form__publish-button-wrapper &amp;gt; button::after, div.ui__header__links &amp;gt; a[href=&amp;#34;/publish&amp;#34;]::after { content: &amp;#34;Toot!&amp;#34;; text-indent: 0; display: block; line-height: initial; }</description></item><item><title>Convert all JPG images to webP</title><link>https://ricard.dev/gists/2022-12-14/</link><pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2022-12-14/</guid><description>It loops through all the jpg images in the folder and converts them to webP with the given configuration of quality and size.
It requires cwebp to be installed on the machine.
for file in *.jpg; do cwebp -q 85 -m 6 -resize 1800 0 -metadata none &amp;#34;$file&amp;#34; -o &amp;#34;${file%.*}.webp&amp;#34;; done</description></item><item><title>Postgres database backup and compressed</title><link>https://ricard.dev/gists/2022-11-16/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2022-11-16/</guid><description>It creates a backup of a database using a specific user and then compressed it with Gzip
pg_dump -U myUser myDatabase | gzip &amp;gt; myFile.gz</description></item><item><title>Crontab go to folder and exectute command saving the output</title><link>https://ricard.dev/gists/2022-11-15/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2022-11-15/</guid><description>Within a cronjob using crontab -e go to a folder, run a command and store the output in a file
@daily cd /my/path &amp;amp;&amp;amp; your-command &amp;gt;&amp;gt; /path/fileName.txt 2&amp;gt;&amp;amp;1</description></item><item><title>PHP Image Gallery</title><link>https://ricard.dev/gists/2022-11-12/</link><pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2022-11-12/</guid><description>Uses PHP to create an image gallery with the given file and folder structure. No need for metadata or database, just reads the disk and builds the gallery
&amp;lt;?php /** ====================================== General ====================================== - Requirements: php 7 ====================================== Settings ====================================== - RANDOMIZE (default: true) // Order in main view - ALBUMS (default: uploads) // Path to the folder ====================================== Content structure ====================================== - index.php (this file, or any other file name) The galleries are regular folders with images files: &amp;#34;.</description></item><item><title>cURL files and download them with PHP</title><link>https://ricard.dev/gists/2022-11-11/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://ricard.dev/gists/2022-11-11/</guid><description>It looks through a set of URL&amp;rsquo;s (usually numeric) and downloads each image file to disk
&amp;lt;?php function grab_image($url,$saveto){ $ch = curl_init ($url); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_BINARYTRANSFER,1); $raw=curl_exec($ch); curl_close ($ch); if(file_exists($saveto)){ unlink($saveto); } $fp = fopen($saveto,&amp;#39;x&amp;#39;); fwrite($fp, $raw); fclose($fp); } for ($i=1; $i &amp;lt;= 36; $i++) { $extension = &amp;#34;jpg&amp;#34;; $num_padded = sprintf(&amp;#34;%02d&amp;#34;, $i); $num_padded = $i; $url = &amp;#34;https://SITE.COM&amp;#34;.$num_padded.&amp;#34;.&amp;#34;.$extension; grab_image($url,&amp;#34;downloads/image-&amp;#34; . $num_padded .&amp;#34;.&amp;#34;.$extension); # code... }</description></item></channel></rss>